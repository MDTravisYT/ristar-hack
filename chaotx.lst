00000000                            ;	TO ADD CODE:	4E F9 (ADDRESS LONGWORD)
00000000                            
00000000                            align    macro
00000000                                cnop 0,\1
00000000                                endm
00000000                            
00000000                            		incbin     "ristar.j - Copy.bin"	;	Include hex edited Ristar ROM
00200000                            											;		to jump to custom code
00200000                            											
00200000                            ;	============================================================================!
00200000                            		align		$200000				 ;	SHC SPLASH							!
00200000                            ;	============================================================================!
00200000                            											
00200000                            CustomGameMode:				             ;	
00200000 4EB9 0000 0000             		jsr	SHC				             ;	Play SHC screen
00200006 33FC 0000 00FF EA00        		move.w	#0,	$FFEA00				 ;	Move 0 to game mode RAM (i moved the level mode here)
0020000E 4EF9 0000 789E             		jmp	$789E				           ;	Jump to level code
00200014                            											
00200014                            SHC:	incbin	"SHC_Advanced.bin"          ;	SHC screen include
00205AFE                            
00205AFE                            ;	============================================================================!
00205AFE                            		align		$210000				 ;	CHUNK LOADING						!
00210000                            ;	============================================================================!        
00210000                            
00210000 =00163716                  ChunkPointers	=	$163716
00210000 =00004C3E                  stardec	=	$4C3E
00210000 =000049A8                  nemdec			=	$49A8
00210000 =00004996                  nemdec_vram		=	$4996
00210000                            
00210000                            sub_87EA:				               ; CODE XREF: sub_7B32+492↑p
00210000                            
00210000                            		;		move.b  $FFE500,d0		;	level art
00210000                            		;		jsr     $13B06
00210000                            				
00210000 1039 00FF E500             				move.b  $FFE500,d0		;	level palette
00210006 4EB9 0001 3D0E             				jsr     $13D0E
0021000C 43F9 0016 3716             				lea     (ChunkPointers).l,a1
00210012 7000                       				moveq   #0,d0
00210014 1039 00FF E500             				move.b  $FFE500,d0
0021001A D040                       				add.w   d0,d0
0021001C D040                       				add.w   d0,d0
0021001E 2071 0000                  				movea.l (a1,d0.w),a0
00210022 49F9 00FF 0000             				lea     $FF0000.l,a4
00210028 4EB9 0000 49A8             				jsr     (nemdec).l
0021002E 43F9 0018 8492             				lea     ($188492).l,a1
00210034 7000                       				moveq   #0,d0
00210036 1039 00FF E500             				move.b  $FFE500,d0
0021003C D040                       				add.w   d0,d0
0021003E D040                       				add.w   d0,d0
00210040 2271 0000                  				movea.l (a1,d0.w),a1
00210044 45F9 00FF A400             				lea     $FFA400,a2
0021004A 4EB9 0001 3DB6             				jsr     $13DB6
00210050 4EB9 0001 3A0E             				jsr     $13A0E
00210056 41F9 0000 0000             				lea		ArtMZ,	a0
0021005C 23FC 6400 0000 00C0 0004   				move.l  #$64000000,($C00004).l
00210066 4EB9 0000 4996             				jsr     (nemdec_vram).l
0021006C 1039 00FF E500             				move.b  $FFE500,d0		;	level display?
00210072 4EB9 0000 0000             				jsr     sub_13A68
00210078                            				
00210078 41F9 0000 0000             				lea	  (Indexes).l,a0	;	collision indexes
0021007E 49F9 00FF B000             				lea     $FFB000.l,a4
00210084 4EB9 0000 49A8             				jsr     (nemdec).l
0021008A                            				
0021008A 4EF9 0001 3A2E             				jmp     $13A2E
00210090                            ; End of function sub_87EA
00210090                            
00210090                            
00210090                            ; =============== S U B R O U T I N E =======================================
00210090                            
00210090                            
00210090                            sub_8852:				               ; CODE XREF: sub_7B32+104↑p
00210090 1039 00FF E500             				move.b  $FFE500,d0
00210096 4EB9 0001 3A98             				jsr     $13A98
0021009C 1039 00FF E500             				move.b  $FFE500,d0
002100A2 4EB9 0001 3CC4             				jsr     $13CC4
002100A8 1039 00FF E500             				move.b  $FFE500,d0
002100AE                            
002100AE 43F9 0018 53B0             				lea     ($1853B0).l,a1
002100B4                            loc_886A:				               ; CODE XREF: sub_EEA6+CC↓p
002100B4 7000                       				moveq   #0,d0
002100B6 1039 00FF E500             				move.b  $FFE500,d0
002100BC D040                       				add.w   d0,d0
002100BE D040                       				add.w   d0,d0
002100C0 2071 0000                  				movea.l (a1,d0.w),a0
002100C4 43F9 00FF 4000             				lea     ($FF4000).l,a1
002100CA 4EB9 0000 4C3E             				jsr     (stardec).l
002100D0 41F9 00FF 4000             				lea     ($FF4000).l,a0
002100D6 43F9 00FF AA00             				lea     ($FFAA00).l,a1
002100DC 3E3C 00FF                  				move.w  #$FF,d7
002100E0                            
002100E0                            loc_889A:				               ; CODE XREF: sub_8852+4A↓j
002100E0 22D8                       				move.l  (a0)+,(a1)+
002100E2 51CF FFFC                  				dbf     d7,loc_889A
002100E6 43F9 0018 8552             				lea     ($188552).l,a1
002100EC 7000                       				moveq   #0,d0
002100EE 1039 00FF E500             				move.b  $FFE500,d0
002100F4 D040                       				add.w   d0,d0
002100F6 D040                       				add.w   d0,d0
002100F8 2271 0000                  				movea.l (a1,d0.w),a1
002100FC 45F9 00FF A600             				lea     $FFA600,a2
00210102 4EB9 0001 3DB6             				jsr     $13DB6
00210108 4E75                       				rts
0021010A                            				
0021010A                            ;	============================================================================!
0021010A                            		align		$212000				 ;	BLOCK LOADING						!
00212000                            ;	============================================================================!
00212000                            		
00212000 =0011C764                  BlockPointers	=	$11C764
00212000                            
00212000                            sub_13A68:				              ; CODE XREF: sub_87EA+4↑p
00212000 7000                       				moveq   #0,d0
00212002 1039 00FF E500             				move.b  $FFE500,d0
00212008 41F9 0011 C764             				lea     (BlockPointers).l,a0
0021200E D040                       				add.w   d0,d0
00212010 D040                       				add.w   d0,d0
00212012 D040                       				add.w   d0,d0
00212014 3E30 0004                  				move.w  4(a0,d0.w),d7
00212018 2070 0000                  				movea.l (a0,d0.w),a0
0021201C 49F9 00FF 8008             				lea     $FF8008,a4
00212022 4A39 00FF E501             				tst.b   $FFE501
00212028 6600                       				bne.s   loc_13A90
0021202A 49F9 00FF 8000             				lea     $FF8000,a4
00212030                            
00212030                            loc_13A90:				              ; CODE XREF: sub_13A68+22↑j
00212030 303C 0120                  				move.w  #$120,d0
00212034                            			;	bra.w   loc_13F9C
00212034                            loc_13F9C:				              ; CODE XREF: sub_13A68+2C↑j
00212034                            								        ; sub_13A98+3E↑j
00212034 48E7 81C0                  				movem.l d0/d7-a1,-(sp)
00212038 4EB9 0000 49A8             				jsr     (nemdec).l
0021203E 4CDF 0381                  				movem.l (sp)+,d0/d7-a1
00212042                            
00212042                            loc_13FAA:				              ; CODE XREF: sub_13A68+548↓j
00212042 3214                       				move.w  (a4),d1
00212044 D240                       				add.w   d0,d1
00212046 38C1                       				move.w  d1,(a4)+
00212048 51CF FFF8                  				dbf     d7,loc_13FAA
0021204C 4E75                       				rts
0021204E                            				
0021204E                            ;	============================================================================!
0021204E                            		align		$220000				 ;	CHUNK DATA							!
00220000                            ;	============================================================================!  
00220000                            		
00220000                            		incbin	"SonLVL/chunks.nem"
00223244                            		
00223244                            ;	============================================================================!
00223244                            		align		$228000				 ;	BLOCK DATA							!
00228000                            ;	============================================================================!  
00228000                            
00228000                            		incbin	"SonLVL/blocks.nem"
002287FC                            ArtMZ:	incbin	"SonLVL/ArtMZ.bin"
0022AF82                            Indexes:incbin	"SonLVL/Indexes.bin"
0022AFE7                            
0022AFE7                            ;	============================================================================!
0022AFE7                            		align		$230000				 ;	LAYOUT DATA							!
00230000                            ;	============================================================================!  
00230000                            		incbin	"SonLVL/map.bin"
0023009E                            		
0023009E                            ;	============================================================================!
0023009E                            		align		$240000				 ;	COLLISION DATA						!
00240000                            ;	============================================================================!  
00240000                            NormalArray:		incbin	"SonLVL/Collision Array (Normal).bin"
00241000                            RotatedArray:		incbin	"SonLVL/Collision Array (Rotated).bin"
00242000                            ;	============================================================================!
00242000                            		align		$242000				 ;	COLLISION CODE						!
00242000                            ;	============================================================================!  
00242000                            
00242000                            sub_1F49C:                              ; CODE XREF: sub_1854C+36↑p
00242000                                                                     ; sub_18598+13C↑p ...
00242000 47F9 00FF E552                              lea     $FFE552,a3
00242006 2279 00FF F010                              movea.l $FFF010,a1
0024200C 4EB9 0000 0000                              jsr     sub_13D48
00242012 7601                                        moveq   #1,d3
00242014 3011                                        move.w  (a1),d0
00242016 33C9 00FF AE90                              move.w  a1,($FFAE90).l
0024201C 33C0 00FF AEF6                              move.w  d0,($FFAEF6).l
00242022 0F00                                        btst    d7,d0
00242024 6700 0000                                   beq.w   bra_1F52C
00242028 0240 01FF                                   andi.w  #$1FF,d0
0024202C 6700 0000                                   beq.w   bra_1F52C
00242030 3A00                                        move.w  d0,d5
00242032 DA45                                        add.w   d5,d5
00242034 43F9 00FF B200                              lea     $FFB200,a1
0024203A 3771 5000 0002                              move.w  (a1,d5.w),2(a3)
00242040 2279 00FF E528                              movea.l $FFE528,a1
00242046 1031 0000                                   move.b  (a1,d0.w),d0
0024204A 0240 00FF                                   andi.w  #$FF,d0
0024204E 3800                                        move.w  d0,d4
00242050 6700 0000                                   beq.w   bra_1F52C
00242054 43F9 0000 0000                              lea     (unk_1F0FA).l,a1
0024205A 16B1 4000                                   move.b  (a1,d4.w),(a3)
0024205E E94C                                        lsl.w   #4,d4
00242060 3A01                                        move.w  d1,d5
00242062 0245 000F                                   andi.w  #$F,d5
00242066 DA44                                        add.w   d4,d5
00242068 43FA DF96                                   lea     NormalArray(pc),a1
0024206C 1831 5000                                   move.b  (a1,d5.w),d4
00242070 4884                                        ext.w   d4
00242072 6700 0000                                   beq.w   bra_1f530
00242076 6B00                                        bmi.s   bra_1F51E
00242078 3A02                                        move.w  d2,d5
0024207A 0245 000F                                   andi.w  #$F,d5
0024207E D845                                        add.w   d5,d4
00242080 0C44 000F                                   cmpi.w  #$F,d4
00242084 6D00                                        blt.s   bra_1f530
00242086 76FF                                        moveq   #$FFFFFFFF,d3
00242088                                      ;       bra.s   bra_1f530
00242088                            				
00242088 4EF9 0001 F530             bra_1f530:		jmp	$1f530
0024208E                            sub_13D48:
0024208E 4EF9 0001 3D48             				jmp	$13D48
00242094                            bra_1F52C:
00242094 4EF9 0001 F52C             				jmp	$1F52C
0024209A 4EF9 0001 F51E             bra_1F51E:		jmp	$1F51E
002420A0                            
002420A0                            ;	============================================================================!
002420A0                            		align		$244000				 ;	COLLISION CODE						!
00244000                            ;	============================================================================! 
00244000                            
00244000                            sub_1F310:                              ; CODE XREF: sub_1F26C↑p
00244000                                                                     ; sub_1F26C+3C↑p ...
00244000 2279 00FF F010                              movea.l $FFF010,a1
00244006 4EB9 0001 3D48                              jsr     $13D48
0024400C 3011                                        move.w  (a1),d0
0024400E 0F00                                        btst    d7,d0
00244010 6700                                        beq.s   bra_1f362
00244012 0240 01FF                                   andi.w  #$1FF,d0
00244016 6700                                        beq.s   bra_1f362
00244018 3600                                        move.w  d0,d3
0024401A D643                                        add.w   d3,d3
0024401C 43F9 00FF B200                              lea     $FFB200,a1
00244022 3771 3000 0002                              move.w  (a1,d3.w),2(a3)
00244028 2279 00FF E528                              movea.l $FFE528,a1
0024402E 1031 0000                                   move.b  (a1,d0.w),d0
00244032 1740 0001                                   move.b  d0,1(a3)
00244036 0240 00FF                                   andi.w  #$FF,d0
0024403A 43FA 0000                                   lea     unk_1F0FA(pc),a1
0024403E 16B1 0000                                   move.b  (a1,d0.w),(a3)
00244042 E948                                        lsl.w   #4,d0
00244044 3602                                        move.w  d2,d3
00244046 0243 000F                                   andi.w  #$F,d3
0024404A D640                                        add.w   d0,d3
0024404C 43FA CFB2                                   lea     RotatedArray(pc),a1
00244050 1031 3000                                   move.b  (a1,d3.w),d0
00244054 4880                                        ext.w   d0
00244056 4E75                                        rts
00244058                            
00244058 4EF9 0001 F362             bra_1f362:		jmp	$1f362
0024405E                            				 
0024405E                            unk_1F0FA:      
0024405E FF00 E020                  				dc.l $FF00E020
00244062 A060 F0F0                  				dc.l $A060F0F0
00244066 1010 9090                  				dc.l $10109090
0024406A 7070 D030                  				dc.l $7070D030
0024406E D030 B050                  				dc.l $D030B050
00244072 B050 F8F8                  				dc.l $B050F8F8
00244076 F8F8 0808                  				dc.l $F8F80808
0024407A 0808 8888                  				dc.l $8088888
0024407E 8888 7878                  				dc.l $88887878
00244082 7878 C838                  				dc.l $7878C838
00244086 C838 C838                  				dc.l $C838C838
0024408A C838 B848                  				dc.l $C838B848
0024408E B848 B848                  				dc.l $B848B848
00244092 B848 40C0                  				dc.l $B84840C0
00244096 8040 C000                  				dc.l $8040C000
0024409A 0000 0000                  				dc.l 0
0024409E                            				
0024409E                            ;	============================================================================!
0024409E                            		align		$300000				 ;	LOADING SCREEN						!
00300000                            ;	============================================================================! 
00300000                            
00300000 =0000C000                  PLANE_A		=	$C000
00300000 =0000E000                  PLANE_B		=	$E000
00300000 =00C00000                  VDPDATA		=	$C00000
00300000 =00C00004                  VDPCTRL		=	$C00004
00300000 =C0000000                  CRAMWRITE:	=	$C0000000
00300000                            
00300000                            copyTilemap:	macro source,loc,width,height
00300000                            		lea	(source).l,a1
00300000                            		move.l	#$40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14),d0
00300000                            		moveq	#width,d1
00300000                            		moveq	#height,d2
00300000                            		bsr.w	DrawTileMap
00300000                            		endm
00300000                            
00300000                            LoadScreen:
00300000 175D 0011                  				move.b  (a5)+,$11(a3)
00300004 51CD FFFA                  				dbf     d5,LoadScreen
00300008 3480                       				move.w  d0,(a2)
0030000A 4CD6 7FFF                  				movem.l (a6),d0-d7/a0-a6
0030000E 46FC 2700                  				move    #$2700,sr
00300012                            				
00300012                            		;		above is a chunk of the init routine, as it's jumped to in the middle of it
00300012                            				
00300012 4DF9 00C0 0004             				lea		VDPCTRL,	A6
00300018                            		;		move.w	#$8000+%00000001,(A6)
00300018 3CBC 8154                  				move.w	#$8100+%01010100,(A6)
0030001C 3CBC 8230                  				move.w	#$8200+(PLANE_A/$400),(A6)
00300020 3CBC 8407                  				move.w	#$8400+(PLANE_B/$2000),(A6)
00300024                            		;		move.w	#$9000+%11111111,	(A6)
00300024                            				
00300024 2CBC C000 0000             				move.l	#CRAMWRITE,	(A6)
0030002A 33FC 0000 00C0 0000        				move.w	#$0000,	VDPDATA
00300032 33FC 00EE 00C0 0000        				move.w	#$00EE,	VDPDATA
0030003A 33FC 00CE 00C0 0000        				move.w	#$00CE,	VDPDATA
00300042 33FC 008C 00C0 0000        				move.w	#$008C,	VDPDATA
0030004A 33FC 0004 00C0 0000        				move.w	#$0004,	VDPDATA
00300052                            				
00300052 41F9 0000 0000             				lea		Font,	a0		;	load graphics
00300058 23FC 4000 0000 00C0 0004   				move.l  #$40000000,($C00004).l
00300062 4EB9 0000 4996             				jsr     (nemdec_vram).l
00300068                            				
00300068 41F9 0000 0000             				lea	  (LoadMap).l,a0	;	map
0030006E 49F9 00FF 0000             				lea     $FF0000.l,a4
00300074 4EB9 0000 49A8             				jsr     (nemdec).l
0030007A                            				
0030007A 43F9 00FF 0000 203C 4620+  				copyTilemap	$FF0000,$C620,9,3
0030008E                            				
0030008E 4EF9 0000 0300             				jmp		$300	;	jump to checksum check
00300094                            				
00300094                            DrawTileMap:		;	SUBROUTINE
00300094 4DF9 00C0 0000                             lea     VDPDATA,a6
0030009A 283C 0080 0000                             move.l  #$800000,d4
003000A0                            
003000A0                            .LoopRow:                           
003000A0 2D40 0004                                  move.l  d0,4(a6)    ; VDPCTRL
003000A4 3601                                       move.w  d1,d3
003000A6                            
003000A6                            .LoopColumn: 
003000A6 3C99                                       move.w  (a1)+,(a6)
003000A8 51CB FFFC                                  dbf     d3,.LoopColumn
003000AC D084                                       add.l   d4,d0
003000AE 51CA FFF0                                  dbf     d2,.LoopRow
003000B2 4E75                                       rts
003000B4                            
003000B4                            				
003000B4                            Font:		incbin	"Font.nem"
003001C8                            LoadMap:	incbin	"LoadMap.nem"
